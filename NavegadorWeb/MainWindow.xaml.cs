using System;
using System.ComponentModel;
using System.Windows;
using System.Windows.Input;
using System.Windows.Controls; // Needed for TextChangedEventArgs and SelectionChangedEventArgs
// using NavegadorWeb.Windows; // Keep this ONLY if SettingsWindow is truly in NavegadorWeb.Windows namespace
// using HtmlAgilityPack; // Keep this ONLY if you are actively using HtmlAgilityPack in this file

namespace NavegadorWeb
{
    // 'partial' is KEY. It means there's another part of this class (generated by WPF from XAML).
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            // THIS IS THE ONLY InitializeComponent() line that should exist.
            // DO NOT define the body of this method here. WPF generates it automatically.
            InitializeComponent();

            // Here you can set the DataContext, for example:
            // this.DataContext = new MainViewModel(); // Uncomment if you use MVVM
        }

        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            // Logic that runs once the window and its content have been loaded.
            // For example, you could initialize the first tab or navigate to a default URL.
        }

        private void Window_Closing(object sender, CancelEventArgs e)
        {
            // Logic to handle window closing.
            // Here you could save session state, confirm with the user, etc.
        }

        private void MainWindow_SourceInitialized(object sender, EventArgs e)
        {
            // This is for custom window behaviors like resizing the borderless window.
            // You would typically add interop code here.
        }

        private void Window_StateChanged(object sender, EventArgs e)
        {
            // Logic to handle window state changes (minimized, maximized, normal).
            // Update the maximize/restore button icon.
            if (this.WindowState == WindowState.Maximized)
            {
                MaximizeRestoreButton.Content = "❐"; // Restore icon
            }
            else
            {
                MaximizeRestoreButton.Content = "⬜"; // Maximize icon
            }
        }

        private void TitleBar_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            // Allows dragging the window when the title bar is clicked.
            if (e.ClickCount == 2) // Double-click to maximize/restore
            {
                MaximizeRestoreButton_Click(sender, e);
            }
            else // Single click to drag
            {
                DragMove();
            }
        }

        private void MinimizeButton_Click(object sender, RoutedEventArgs e)
        {
            this.WindowState = WindowState.Minimized;
        }

        private void MaximizeRestoreButton_Click(object sender, RoutedEventArgs e)
        {
            if (this.WindowState == WindowState.Maximized)
            {
                this.WindowState = WindowState.Normal;
            }
            else
            {
                this.WindowState = WindowState.Maximized;
            }
        }

        private void CloseButton_Click(object sender, RoutedEventArgs e)
        {
            this.Close();
        }

        private void BackButton_Click(object sender, RoutedEventArgs e)
        {
            // Lógica para ir atrás en el navegador actual
            // (this.BrowserTabs.SelectedItem as TabItemData)?.WebView.GoBack();
        }

        private void ForwardButton_Click(object sender, RoutedEventArgs e)
        {
            // Lógica para ir adelante en el navegador actual
            // (this.BrowserTabs.SelectedItem as TabItemData)?.WebView.GoForward();
        }

        private void RefreshButton_Click(object sender, RoutedEventArgs e)
        {
            // Lógica para recargar la página actual
            // (this.BrowserTabs.SelectedItem as TabItemData)?.WebView.Reload();
        }

        private void AddressBar_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                // Lógica para navegar a la URL ingresada en la barra de direcciones
                // (this.DataContext as MainViewModel)?.Navigate(AddressBar.Text);
            }
        }

        private void HomeButton_Click(object sender, RoutedEventArgs e)
        {
            // Lógica para ir a la página de inicio predeterminada
            // (this.DataContext as MainViewModel)?.Navigate("about:blank"); // Example
        }

        private void NewTabButton_Click(object sender, RoutedEventArgs e)
        {
            // Lógica para abrir una nueva pestaña
            // (this.DataContext as MainViewModel)?.AddNewTab();
        }

        private void SettingsButton_Click(object sender, RoutedEventArgs e)
        {
            // Lógica para abrir la ventana de configuración.
            // Asegúrate de que 'SettingsWindow' exista como una clase en tu proyecto
            // y que el using directive para su namespace sea correcto.
            // Ejemplo: new SettingsWindow().ShowDialog();
        }

        private void FindTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            // Logic for finding text on page
            // if (e.Key == Key.Enter)
            // {
            //     (this.BrowserTabs.SelectedItem as TabItemData)?.WebView.Find(FindTextBox.Text);
            // }
        }

        private void FindTextBox_TextChanged(object sender, TextChangedEventArgs e)
        {
            // Logic for finding text on page as user types
            // (this.BrowserTabs.SelectedItem as TabItemData)?.WebView.Find(FindTextBox.Text);
        }

        private void FindPreviousButton_Click(object sender, RoutedEventArgs e)
        {
            // Logic to find previous occurrence
            // (this.BrowserTabs.SelectedItem as TabItemData)?.WebView.FindPrevious(FindTextBox.Text);
        }

        private void FindNextButton_Click(object sender, RoutedEventArgs e)
        {
            // Logic to find next occurrence
            // (this.BrowserTabs.SelectedItem as TabItemData)?.WebView.FindNext(FindTextBox.Text);
        }

        private void CloseFindBarButton_Click(object sender, RoutedEventArgs e)
        {
            FindBar.Visibility = Visibility.Collapsed;
            // (this.BrowserTabs.SelectedItem as TabItemData)?.WebView.ClearFindResult();
        }

        // IMPORTANT CORRECTION: The event type for SelectionChanged is SelectionChangedEventArgs
        private void BrowserTabControl_SelectionChanged_Grouped(object sender, SelectionChangedEventArgs e)
        {
            // Logic to handle tab selection change.
            // This should update the address bar and other UI elements
            // to reflect the currently selected tab.
            // You can access the selected tab via BrowserTabs.SelectedItem
            // or the e.AddedItems and e.RemovedItems properties.
        }

        private void CloseTabButton_Click(object sender, RoutedEventArgs e)
        {
            // Logic to close a specific tab.
            // The 'Tag' of the button in XAML is configured to pass the 'TabItemData' object
            // of the tab being closed.
            Button closeButton = sender as Button;
            if (closeButton != null && closeButton.Tag is object tabToClose) // Change 'object' to your tab data type, e.g., 'TabItemData'
            {
                // Here you should have the logic to remove 'tabToClose' from the collection
                // to which 'BrowserTabs.ItemsSource' is bound (e.g., TabGroupManager.SelectedTabGroup.TabsInGroup).
                // For example: (this.DataContext as MainViewModel)?.TabGroupManager.SelectedTabGroup.TabsInGroup.Remove(tabToClose);
            }
        }
    }
}
