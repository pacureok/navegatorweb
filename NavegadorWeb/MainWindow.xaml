<Window x:Class="NavegadorWeb.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:wv2="clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf"
        mc:Ignorable="d"
        Title="Mi Navegador Web" Height="720" Width="1280"
        Loaded="Window_Loaded"
        Closing="Window_Closing">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Barra de Direcci√≥n, Botones y Bot√≥n Nueva Pesta√±a -->
        <Border Grid.Row="0" BorderBrush="LightGray" BorderThickness="0,0,0,1" Padding="5">
            <DockPanel>
                <StackPanel Orientation="Horizontal" DockPanel.Dock="Left">
                    <Button x:Name="BackButton" Content="‚óÄ" Width="30" Height="25" Margin="0,0,5,0" Click="BackButton_Click" ToolTip="Atr√°s"/>
                    <Button x:Name="ForwardButton" Content="‚ñ∂" Width="30" Height="25" Margin="0,0,5,0" Click="ForwardButton_Click" ToolTip="Adelante"/>
                    <Button x:Name="ReloadButton" Content="‚ü≥" Width="30" Height="25" Margin="0,0,5,0" Click="ReloadButton_Click" ToolTip="Recargar"/>
                    <Button x:Name="HomeButton" Content="üè†" Width="30" Height="25" Margin="0,0,5,0" Click="HomeButton_Click" ToolTip="Inicio"/>
                    <Button x:Name="HistoryButton" Content="üïí" Width="30" Height="25" Margin="0,0,5,0" Click="HistoryButton_Click" ToolTip="Historial"/>
                    <Button x:Name="BookmarksButton" Content="‚≠ê" Width="30" Height="25" Margin="0,0,5,0" Click="BookmarksButton_Click" ToolTip="Mis Marcadores"/>
                    <Button x:Name="DownloadsButton" Content="‚¨áÔ∏è" Width="30" Height="25" Margin="0,0,5,0" Click="DownloadsButton_Click" ToolTip="Descargas"/>
                    <Button x:Name="ReaderModeButton" Content="üìñ" Width="30" Height="25" Margin="0,0,5,0" Click="ReaderModeButton_Click" ToolTip="Modo Lectura"/>
                    <Button x:Name="ReadAloudButton" Content="üîä" Width="30" Height="25" Margin="0,0,5,0" Click="ReadAloudButton_Click" ToolTip="Leer en Voz Alta"/>
                    <Button x:Name="SplitScreenButton" Content="‚ÜîÔ∏è" Width="30" Height="25" Margin="0,0,5,0" Click="SplitScreenButton_Click" ToolTip="Pantalla Dividida"/>
                    <Button x:Name="AIButton" Content="ü§ñ" Width="30" Height="25" Margin="0,0,5,0" Click="AIButton_Click" ToolTip="Abrir Gemini (IA) en Pantalla Dividida"/>
                    <Button x:Name="ScreenshotButton" Content="üì∏" Width="30" Height="25" Margin="0,0,5,0" Click="ScreenshotButton_Click" ToolTip="Captura de Pantalla"/>
                    <Button x:Name="TabManagerButton" Content="üóÇÔ∏è" Width="30" Height="25" Margin="0,0,5,0" Click="TabManagerButton_Click" ToolTip="Administrador de Pesta√±as"/> <!-- NUEVO BOT√ìN ADMINISTRADOR DE PESTA√ëAS -->
                </StackPanel>

                <StackPanel Orientation="Horizontal" DockPanel.Dock="Right" HorizontalAlignment="Right">
                    <Button x:Name="IncognitoButton" Content="üï∂Ô∏è" Width="30" Height="25" Margin="0,0,5,0" Click="IncognitoButton_Click" ToolTip="Nueva Ventana Inc√≥gnito"/>
                    <Button x:Name="AddBookmarkButton" Content="‚ûï‚≠ê" Width="40" Height="25" Margin="0,0,5,0" Click="AddBookmarkButton_Click" ToolTip="A√±adir p√°gina actual a Marcadores"/>
                    <Button x:Name="NewTabButton" Content="+" Width="30" Height="25" Margin="0,0,5,0" Click="NewTabButton_Click" ToolTip="Nueva Pesta√±a"/>
                    <Button x:Name="SettingsButton" Content="‚öôÔ∏è" Width="30" Height="25" Click="SettingsButton_Click" ToolTip="Opciones"/>
                </StackPanel>

                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBox x:Name="UrlTextBox" VerticalContentAlignment="Center" KeyDown="UrlTextBox_KeyDown" Text="https://www.google.com" Margin="0,0,5,0" Grid.Column="0"/>
                    <!-- Indicador de Carga -->
                    <ProgressBar x:Name="LoadingProgressBar" Grid.Column="1" Width="50" Height="20" Margin="0,0,5,0" IsIndeterminate="True" Visibility="Collapsed" ToolTip="Cargando..."/>
                </Grid>
            </DockPanel>
        </Border>

        <!-- Contenedor de Pesta√±as -->
        <TabControl x:Name="BrowserTabControl" Grid.Row="1" SelectionChanged="BrowserTabControl_SelectionChanged">
            <!-- Las pesta√±as se a√±adir√°n program√°ticamente -->
        </TabControl>
    </Grid>
</Window>
```

---

**5. Modificaci√≥n del archivo: `MainWindow.xaml.cs`**

Este archivo tendr√° el nuevo manejador de eventos para el bot√≥n del administrador de pesta√±as y los m√©todos p√∫blicos para que `TabManagerWindow` pueda interactuar.

**Ruta:** `./NavegadorWeb/MainWindow.xaml.cs`


```csharp
using Microsoft.Web.WebView2.Core;
using Microsoft.Web.WebView2.Wpf;
using System;
using System.Collections.Generic;
using System.Configuration; // Necesario para ConfigurationManager
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.IO; // Necesario para Path.Combine y operaciones de archivo
using System.Text.Json; // Necesario para JsonSerializer (para historial y marcadores)
using System.Speech.Synthesis; // Necesario para Text-to-Speech
using System.Windows.Media.Imaging; // Necesario para BitmapFrame, PngBitmapEncoder

namespace NavegadorWeb
{
    /// <summary>
    /// L√≥gica de interacci√≥n para MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private string _defaultHomePage = "https://www.google.com"; // P√°gina de inicio predeterminada
        private const string HomePageSettingKey = "DefaultHomePage"; // Clave para la configuraci√≥n de la p√°gina de inicio
        private const string AdBlockerSettingKey = "AdBlockerEnabled"; // Clave para el estado del bloqueador de anuncios
        private const string DefaultSearchEngineSettingKey = "DefaultSearchEngine"; // Clave para el motor de b√∫squeda predeterminado
        private const string TabSuspensionSettingKey = "TabSuspensionEnabled"; // Nueva clave para el estado de la suspensi√≥n de pesta√±as

        private string _defaultSearchEngineUrl = "https://www.google.com/search?q="; // URL base del motor de b√∫squeda predeterminado
        private bool _isTabSuspensionEnabled = false; // Estado de la suspensi√≥n de pesta√±as

        // Lista para mantener un seguimiento de todas las pesta√±as abiertas
        private List<BrowserTabItem> _browserTabs = new List<BrowserTabItem>();

        // Entornos de WebView2
        private CoreWebView2Environment _defaultEnvironment;
        private CoreWebView2Environment _incognitoEnvironment; // Para el modo inc√≥gnito

        // Contenido del script de modo lectura
        private string _readerModeScript = string.Empty;

        // Instancia del sintetizador de voz
        private SpeechSynthesizer _speechSynthesizer;
        private bool _isReadingAloud = false;

        public MainWindow()
        {
            InitializeComponent();
            LoadSettings(); // Cargar configuraciones al iniciar la aplicaci√≥n
            InitializeEnvironments(); // Inicializar los entornos de WebView2
            LoadReaderModeScript(); // Cargar el script de modo lectura

            // Inicializar el sintetizador de voz
            _speechSynthesizer = new SpeechSynthesizer();
            _speechSynthesizer.SetOutputToDefaultAudioDevice(); // Usar el dispositivo de audio predeterminado
            _speechSynthesizer.SpeakCompleted += SpeechSynthesizer_SpeakCompleted; // Manejar el evento de finalizaci√≥n
        }

        /// <summary>
        /// Maneja el evento cuando el sintetizador de voz termina de hablar.
        /// </summary>
        private void SpeechSynthesizer_SpeakCompleted(object sender, SpeakCompletedEventArgs e)
        {
            _isReadingAloud = false;
            Dispatcher.Invoke(() => ReadAloudButton.Content = "üîä"); // Restaurar icono
        }

        /// <summary>
        /// Carga el contenido del archivo ReaderMode.js.
        /// </summary>
        private void LoadReaderModeScript()
        {
            try
            {
                string scriptPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "ReaderMode.js");
                if (File.Exists(scriptPath))
                {
                    _readerModeScript = File.ReadAllText(scriptPath);
                }
                else
                {
                    MessageBox.Show("Advertencia: El archivo 'ReaderMode.js' no se encontr√≥. El modo lectura no funcionar√°.", "Archivo Faltante", MessageBoxButton.OK, Image.Warning);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al cargar el script de modo lectura: {ex.Message}", "Error", MessageBoxButton.OK, Image.Error);
            }
        }


        /// <summary>
        /// Inicializa los entornos CoreWebView2 para el modo normal e inc√≥gnito.
        /// </summary>
        private async void InitializeEnvironments()
        {
            try
            {
                // Entorno para navegaci√≥n normal (persistente)
                string defaultUserDataFolder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "MiNavegadorWeb", "UserData");
                _defaultEnvironment = await CoreWebView2Environment.CreateAsync(null, defaultUserDataFolder);

                // Entorno para navegaci√≥n inc√≥gnito (no persistente)
                // Se crea un directorio temporal que se eliminar√° al cerrar la aplicaci√≥n.
                string incognitoUserDataFolder = Path.Combine(Path.GetTempPath(), "MiNavegadorWebIncognito", Guid.NewGuid().ToString());
                _incognitoEnvironment = await CoreWebView2Environment.CreateAsync(null, incognitoUserDataFolder, new CoreWebView2EnvironmentOptions {
                    IsCustomCrashReportingEnabled = false // Para modo inc√≥gnito, puedes deshabilitar crash reporting si quieres m√°s privacidad
                });
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al inicializar los entornos del navegador: {ex.Message}\nPor favor, aseg√∫rate de tener WebView2 Runtime instalado.", "Error de Inicializaci√≥n", MessageBoxButton.OK, Image.Error);
                Application.Current.Shutdown();
            }
        }


        /// <summary>
        /// Se ejecuta cuando la ventana principal se ha cargado completamente.
        /// Aqu√≠ inicializamos la primera pesta√±a y cargamos la lista de dominios bloqueados.
        /// </summary>
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            // Cargar dominios bloqueados desde un archivo (ej: "blocked_domains.txt" en la ra√≠z de la app)
            // Aseg√∫rate de que este archivo exista en la misma carpeta que el ejecutable de tu aplicaci√≥n.
            string blockedDomainsFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "blocked_domains.txt");
            AdBlocker.LoadBlockedDomainsFromFile(blockedDomainsFilePath);

            AddNewTab(_defaultHomePage); // Abre la primera pesta√±a con la p√°gina de inicio
        }

        /// <summary>
        /// Agrega una nueva pesta√±a al navegador.
        /// </summary>
        /// <param name="url">URL opcional para cargar en la nueva pesta√±a. Si es nulo, usa la p√°gina de inicio predeterminada.</param>
        /// <param name="isIncognito">Indica si la nueva pesta√±a debe abrirse en modo inc√≥gnito.</param>
        private async void AddNewTab(string url = null, bool isIncognito = false)
        {
            // Esperar a que los entornos se inicialicen
            if (_defaultEnvironment == null || _incognitoEnvironment == null)
            {
                await System.Threading.Tasks.Task.Delay(100); // Peque√±a espera si no est√°n listos
                if (_defaultEnvironment == null || _incognitoEnvironment == null)
                {
                    MessageBox.Show("El navegador no est√° listo. Por favor, reinicia la aplicaci√≥n.", "Error", MessageBoxButton.OK, Image.Error);
                    return;
                }
            }

            // Crear un nuevo TabItem (la pesta√±a visual)
            TabItem newTabItem = new TabItem();
            newTabItem.Name = "Tab" + (_browserTabs.Count + 1); // Nombre √∫nico para la pesta√±a

            // Crear un panel para el encabezado de la pesta√±a (t√≠tulo + bot√≥n de cerrar)
            DockPanel tabHeaderPanel = new DockPanel();
            TextBlock headerText = new TextBlock { Text = "Cargando..." }; // Texto inicial del encabezado
            if (isIncognito)
            {
                headerText.Text = "(Inc√≥gnito) Cargando...";
            }

            Button closeButton = new Button
            {
                Content = "‚úñ", // Car√°cter 'X' para cerrar
                Width = 20,
                Height = 20,
                Margin = new Thickness(5, 0, 0, 0),
                ToolTip = "Cerrar Pesta√±a" // Tooltip al pasar el rat√≥n
            };
            closeButton.Click += CloseTabButton_Click; // Asignar evento al bot√≥n de cerrar
            closeButton.Tag = newTabItem; // Asociar el bot√≥n a su TabItem correspondiente
            DockPanel.SetDock(headerText, Dock.Left);
            DockPanel.SetDock(closeButton, Dock.Right);
            tabHeaderPanel.Children.Add(headerText);
            tabHeaderPanel.Children.Add(closeButton);
            newTabItem.Header = tabHeaderPanel; // Asignar el panel como encabezado de la pesta√±a

            // Crear la primera instancia de WebView2 para el contenido de la pesta√±a
            WebView2 webView1 = new WebView2();
            webView1.Source = new Uri(url ?? _defaultHomePage); // Cargar la URL especificada o la p√°gina de inicio
            webView1.Name = "WebView1_Tab" + (_browserTabs.Count + 1); // Nombre √∫nico
            webView1.HorizontalAlignment = HorizontalAlignment.Stretch;
            webView1.VerticalAlignment = VerticalAlignment.Stretch;

            if (isIncognito)
            {
                webView1.CoreWebView2InitializationCompleted += (s, e) => ConfigureCoreWebView2(s as WebView2, e, _incognitoEnvironment);
            }
            else
            {
                webView1.CoreWebView2InitializationCompleted += (s, e) => ConfigureCoreWebView2(s as WebView2, e, _defaultEnvironment);
            }

            // Enlazar eventos comunes del WebView2 para esta pesta√±a (solo al primario por ahora)
            webView1.Loaded += WebView_Loaded;
            webView1.NavigationStarting += WebView_NavigationStarting;
            webView1.SourceChanged += WebView_SourceChanged;
            webView1.NavigationCompleted += WebView_NavigationCompleted;
            webView1.CoreWebView2.DocumentTitleChanged += WebView_DocumentTitleChanged;


            // Contenido inicial de la pesta√±a: solo un WebView2 en un Grid
            Grid tabContent = new Grid();
            tabContent.Children.Add(webView1);
            newTabItem.Content = tabContent;

            // A√±adir la nueva pesta√±a al TabControl principal
            BrowserTabControl.Items.Add(newTabItem);
            BrowserTabControl.SelectedItem = newTabItem; // Seleccionar la nueva pesta√±a autom√°ticamente

            // Crear un objeto BrowserTabItem para rastrear la pesta√±a y sus componentes
            BrowserTabItem browserTab = new BrowserTabItem
            {
                Tab = newTabItem,
                LeftWebView = webView1, // Este es el WebView principal por defecto
                RightWebView = null, // Inicialmente no hay WebView secundario
                HeaderTextBlock = headerText,
                IsIncognito = isIncognito, // Marcar si es inc√≥gnito
                IsSplit = false // Inicialmente no est√° en modo dividido
            };
            _browserTabs.Add(browserTab); // A√±adir a la lista de pesta√±as

            // Actualizar la barra de URL para reflejar la URL de la nueva pesta√±a activa
            UpdateUrlTextBoxFromCurrentTab();
        }

        /// <summary>
        /// Se ejecuta cuando un WebView2 se ha cargado en la interfaz de usuario.
        /// Asegura la inicializaci√≥n de CoreWebView2.
        /// </summary>
        private async void WebView_Loaded(object sender, RoutedEventArgs e)
        {
            WebView2 currentWebView = sender as WebView2;
            if (currentWebView != null)
            {
                // Espera por la inicializaci√≥n de CoreWebView2 si no ha ocurrido ya
                await currentWebView.EnsureCoreWebView2Async(null);
            }
        }

        /// <summary>
        /// Se ejecuta cuando CoreWebView2 ha completado su inicializaci√≥n.
        /// Configura el CoreWebView2 con el entorno y eventos necesarios.
        /// </summary>
        private void ConfigureCoreWebView2(WebView2 currentWebView, CoreWebView2InitializationCompletedEventArgs e, CoreWebView2Environment environment)
        {
            if (currentWebView != null && e.IsSuccess)
            {
                currentWebView.CoreWebView2.Environment.SetCustomFileExtensions(new[] { ".pdf", ".docx", ".xlsx" }); // Ejemplo

                // Desvincular eventos antes de (posiblemente) re-adjuntar para evitar duplicados
                currentWebView.CoreWebView2.WebResourceRequested -= CoreWebView2_WebResourceRequested;
                currentWebView.CoreWebView2.DownloadStarting -= CoreWebView2_DownloadStarting;
                currentWebView.CoreWebView2.DocumentTitleChanged -= WebView_DocumentTitleChanged;
                currentWebView.CoreWebView2.SourceChanged -= WebView_SourceChanged;
                currentWebView.CoreWebView2.NavigationCompleted -= WebView_NavigationCompleted;
                currentWebView.CoreWebView2.NavigationStarting -= WebView_NavigationStarting;

                // Adjuntar el manejador de eventos para interceptar solicitudes de red (bloqueador de anuncios).
                currentWebView.CoreWebView2.WebResourceRequested += CoreWebView2_WebResourceRequested;

                // Habilita las herramientas de desarrollador (F12)
                currentWebView.CoreWebView2.Settings.AreDevToolsEnabled = true;

                // Suscribirse al evento DownloadStarting
                currentWebView.CoreWebView2.DownloadStarting += CoreWebView2_DownloadStarting;

                // Re-adjuntar eventos comunes para este WebView2
                currentWebView.CoreWebView2.DocumentTitleChanged += WebView_DocumentTitleChanged;
                currentWebView.CoreWebView2.SourceChanged += WebView_SourceChanged;
                currentWebView.CoreWebView2.NavigationCompleted += WebView_NavigationCompleted;
                currentWebView.CoreWebView2.NavigationStarting += WebView_NavigationStarting;
            }
        }


        /// <summary>
        /// Intercepta las solicitudes de recursos web para implementar el bloqueador de anuncios.
        /// </summary>
        private void CoreWebView2_WebResourceRequested(object sender, CoreWebView2WebResourceRequestedEventArgs e)
        {
            // Si el bloqueador de anuncios est√° habilitado y la URL est√° en la lista de bloqueo, cancela la solicitud.
            if (AdBlocker.IsEnabled && AdBlocker.IsBlocked(e.Request.Uri))
            {
                // Crea una respuesta HTTP 403 (Forbidden) para bloquear el recurso.
                e.Response = ((WebView2)sender).CoreWebView2.Environment.CreateWebResourceResponse(
                    null, 403, "Forbidden", "Content-Type: text/plain\nAccess-Control-Allow-Origin: *"
                );
            }
        }

        /// <summary>
        /// Maneja el inicio de una descarga desde WebView2.
        /// Permite al usuario elegir la ruta de guardado y actualiza el gestor de descargas.
        /// </summary>
        private async void CoreWebView2_DownloadStarting(object sender, CoreWebView2DownloadStartingEventArgs e)
        {
            // Cancelar la descarga predeterminada de WebView2 para manejarla manualmente
            e.Handled = true;

            // Crear una entrada de descarga inicial
            DownloadEntry newDownload = new DownloadEntry
            {
                FileName = e.ResultFilePath.Split('\\').Last(), // Obtener solo el nombre del archivo
                Url = e.DownloadOperation.Uri,
                TotalBytes = e.DownloadOperation.TotalBytesToReceive,
                TargetPath = e.ResultFilePath, // Ruta predeterminada
                State = CoreWebView2DownloadState.InProgress,
                Progress = 0
            };

            // Mostrar un di√°logo para elegir la ubicaci√≥n de guardado
            Microsoft.Win32.SaveFileDialog saveFileDialog = new Microsoft.Win32.SaveFileDialog
            {
                FileName = newDownload.FileName,
                Filter = "Todos los archivos (*.*)|*.*",
                Title = "Guardar descarga como..."
            };

            if (saveFileDialog.ShowDialog() == true)
            {
                newDownload.TargetPath = saveFileDialog.FileName; // Actualizar la ruta de guardado elegida
                e.ResultFilePath = saveFileDialog.FileName; // Informar a WebView2 la nueva ruta

                // A√±adir/actualizar la descarga en el gestor
                DownloadManager.AddOrUpdateDownload(newDownload);

                // Suscribirse a los eventos de progreso y estado de la operaci√≥n de descarga
                e.DownloadOperation.BytesReceivedChanged += (s, args) =>
                {
                    newDownload.ReceivedBytes = e.DownloadOperation.BytesReceived;
                    if (newDownload.TotalBytes > 0)
                    {
                        newDownload.Progress = (int)((double)newDownload.ReceivedBytes / newDownload.TotalBytes * 100);
                    }
                    // Actualizar la UI del gestor de descargas (si est√° abierta)
                    DownloadManager.AddOrUpdateDownload(newDownload);
                };

                e.DownloadOperation.StateChanged += (s, args) =>
                {
                    newDownload.State = e.DownloadOperation.State;
                    newDownload.IsActive = (e.DownloadOperation.State == CoreWebView2DownloadState.InProgress);
                    if (newDownload.State == CoreWebView2DownloadState.Completed || newDownload.State == CoreWebView2DownloadState.Interrupted)
                    {
                        newDownload.EndTime = DateTime.Now;
                        MessageBox.Show($"Descarga de '{newDownload.FileName}' ha {newDownload.State}.", "Descarga Finalizada", MessageBoxButton.OK, Image.Information);
                    }
                    // Actualizar la UI del gestor de descargas (si est√° abierta)
                    DownloadManager.AddOrUpdateDownload(newDownload);
                };
            }
            else
            {
                // Si el usuario cancela el di√°logo de guardado, cancelar la descarga
                e.Cancel = true;
                MessageBox.Show("Descarga cancelada por el usuario.", "Descarga Cancelada", MessageBoxButton.OK, Image.Information);
            }
        }

        /// <summary>
        /// Se ejecuta cuando la URL de un WebView2 cambia.
        /// Actualiza la barra de direcci√≥n si es la pesta√±a activa y el WebView principal.
        /// </summary>
        private void WebView_SourceChanged(object sender, CoreWebView2SourceChangedEventArgs e)
        {
            WebView2 currentWebView = sender as WebView2;
            var browserTab = GetCurrentBrowserTabItem(); // Obtener la pesta√±a actualmente seleccionada

            // Solo actualiza la barra de direcci√≥n si este WebView es el principal (LeftWebView) de la pesta√±a seleccionada
            if (browserTab != null && browserTab.LeftWebView == currentWebView)
            {
                UrlTextBox.Text = currentWebView.CoreWebView2.Source;
            }
        }


        /// <summary>
        /// Se ejecuta cuando la navegaci√≥n en un WebView2 ha completado.
        /// Muestra un mensaje de error si la navegaci√≥n fall√≥ y oculta el indicador de carga.
        /// </summary>
        private void WebView_NavigationCompleted(object sender, CoreWebView2NavigationCompletedEventArgs e)
        {
            WebView2 currentWebView = sender as WebView2;
            var browserTab = _browserTabs.FirstOrDefault(t => t.LeftWebView == currentWebView || t.RightWebView == currentWebView);

            if (browserTab != null && BrowserTabControl.SelectedItem == browserTab.Tab)
            {
                if (!e.IsSuccess)
                {
                    MessageBox.Show($"La navegaci√≥n a {currentWebView.CoreWebView2.Source} fall√≥ con el c√≥digo de error {e.WebErrorStatus}", "Error de Navegaci√≥n", MessageBoxButton.OK, Image.Error);
                }
                else
                {
                    // A√±adir la p√°gina al historial SOLO SI NO ES UNA PESTA√ëA INC√ìGNITO y es el WebView principal
                    if (!browserTab.IsIncognito && browserTab.LeftWebView == currentWebView)
                    {
                        HistoryManager.AddHistoryEntry(currentWebView.CoreWebView2.Source, currentWebView.CoreWebView2.DocumentTitle);
                    }
                }
            }
            LoadingProgressBar.Visibility = Visibility.Collapsed; // Ocultar el indicador de carga
        }

        /// <summary>
        /// Se ejecuta antes de que comience una navegaci√≥n en un WebView2.
        /// Muestra el indicador de carga.
        /// </summary>
        private void WebView_NavigationStarting(object sender, CoreWebView2NavigationStartingEventArgs e)
        {
            LoadingProgressBar.Visibility = Visibility.Visible; // Mostrar el indicador de carga
            // Aqu√≠ puedes a√±adir l√≥gica para bloquear ciertas URLs o modificar la solicitud antes de que comience la navegaci√≥n.
        }

        /// <summary>
        /// Se ejecuta cuando el t√≠tulo del documento en un WebView2 cambia.
        /// Actualiza el encabezado de la pesta√±a y el t√≠tulo de la ventana principal.
        /// </summary>
        private void WebView_DocumentTitleChanged(object sender, object e)
        {
            WebView2 currentWebView = sender as WebView2;
            if (currentWebView != null)
            {
                // Encuentra la pesta√±a asociada a este WebView2.
                var tabItem = _browserTabs.FirstOrDefault(t => t.LeftWebView == currentWebView || t.RightWebView == currentWebView);
                if (tabItem != null)
                {
                    // Si es el WebView izquierdo (principal), actualiza el encabezado de la pesta√±a.
                    if (tabItem.LeftWebView == currentWebView)
                    {
                        string title = currentWebView.CoreWebView2.DocumentTitle;
                        if (tabItem.IsIncognito)
                        {
                            tabItem.HeaderTextBlock.Text = "(Inc√≥gnito) " + title;
                        }
                        else
                        {
                            tabItem.HeaderTextBlock.Text = title;
                        }
                    }
                }

                // Si es la pesta√±a activa y es el WebView principal, actualiza tambi√©n el t√≠tulo de la ventana principal.
                if (BrowserTabControl.SelectedItem == tabItem?.Tab && tabItem.LeftWebView == currentWebView)
                {
                    this.Title = currentWebView.CoreWebView2.DocumentTitle + " - Mi Navegador Web";
                }
            }
        }

        /// <summary>
        /// Maneja el clic en el bot√≥n "Ir" o la tecla Enter en la barra de URL.
        /// </summary>
        private void GoButton_Click(object sender, RoutedEventArgs e)
        {
            NavigateToUrlInCurrentTab();
        }

        /// <summary>
        /// Maneja la tecla Enter en la barra de URL.
        /// </summary>
        private void UrlTextBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.Key == Key.Enter)
            {
                NavigateToUrlInCurrentTab();
            }
        }

        /// <summary>
        /// Navega a la URL en la pesta√±a actualmente activa.
        /// Si el texto no es una URL v√°lida, lo trata como una b√∫squeda.
        /// </summary>
        private void NavigateToUrlInCurrentTab()
        {
            WebView2 currentWebView = GetCurrentWebView(); // Obtiene el WebView principal de la pesta√±a activa
            if (currentWebView == null || currentWebView.CoreWebView2 == null)
            {
                MessageBox.Show("No hay una pesta√±a activa o el navegador no est√° listo.", "Error", MessageBoxButton.OK, Image.Error);
                return;
            }

            string input = UrlTextBox.Text.Trim();
            string urlToNavigate = input;

            // Intentar crear una URI para validar si es una URL bien formada
            if (!Uri.TryCreate(input, UriKind.Absolute, out Uri uriResult) ||
                (uriResult.Scheme != Uri.UriSchemeHttp && uriResult.Scheme != Uri.UriSchemeHttps))
            {
                // Si no es una URL v√°lida (o no tiene http/https), asumimos que es una b√∫squeda
                urlToNavigate = _defaultSearchEngineUrl + Uri.EscapeDataString(input);
            }
            // Si es una URL v√°lida pero no tiene esquema (ej. "google.com"), a√±adir "http://"
            else if (uriResult.IsAbsoluteUri && string.IsNullOrEmpty(uriResult.Scheme))
            {
                urlToNavigate = "http://" + input;
            }


            try
            {
                currentWebView.CoreWebView2.Navigate(urlToNavigate);
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al navegar: {ex.Message}", "Error", MessageBoxButton.OK, Image.Error);
            }
        }

        /// <summary>
        /// Navega hacia atr√°s en el historial de la pesta√±a activa.
        /// </summary>
        private void BackButton_Click(object sender, RoutedEventArgs e)
        {
            WebView2 currentWebView = GetCurrentWebView();
            if (currentWebView != null && currentWebView.CoreWebView2 != null && currentWebView.CoreWebView2.CanGoBack)
            {
                currentWebView.CoreWebView2.GoBack();
            }
        }

        /// <summary>
        /// Navega hacia adelante en el historial de la pesta√±a activa.
        /// </summary>
        private void ForwardButton_Click(object sender, RoutedEventArgs e)
        {
            WebView2 currentWebView = GetCurrentWebView();
            if (currentWebView != null && currentWebView.CoreWebView2 != null && currentWebView.CoreWebView2.CanGoForward)
            {
                currentWebView.CoreWebView2.GoForward();
            }
        }

        /// <summary>
        /// Recarga la p√°gina actual en la pesta√±a activa (panel izquierdo si est√° dividido).
        /// </summary>
        private void ReloadButton_Click(object sender, RoutedEventArgs e)
        {
            WebView2 currentWebView = GetCurrentWebView();
            if (currentWebView != null && currentWebView.CoreWebView2 != null)
            {
                currentWebView.CoreWebView2.Reload();
            }
        }

        /// <summary>
        /// Navega a la p√°gina de inicio predeterminada en la pesta√±a activa (panel izquierdo si est√° dividido).
        /// </summary>
        private void HomeButton_Click(object sender, RoutedEventArgs e)
        {
            WebView2 currentWebView = GetCurrentWebView();
            if (currentWebView != null && currentWebView.CoreWebView2 != null)
            {
                currentWebView.CoreWebView2.Navigate(_defaultHomePage);
            }
        }

        /// <summary>
        /// Agrega una nueva pesta√±a al hacer clic en el bot√≥n "+".
        /// </summary>
        private void NewTabButton_Click(object sender, RoutedEventArgs e)
        {
            AddNewTab(); // Abre una pesta√±a normal por defecto
        }

        /// <summary>
        /// Maneja el clic en el bot√≥n "Historial". Abre la ventana del historial.
        /// </summary>
        private void HistoryButton_Click(object sender, RoutedEventArgs e)
        {
            HistoryWindow historyWindow = new HistoryWindow();
            if (historyWindow.ShowDialog() == true) // Muestra la ventana del historial como un di√°logo
            {
                // Si el usuario seleccion√≥ una URL del historial y hizo doble clic
                if (!string.IsNullOrEmpty(historyWindow.SelectedUrl))
                {
                    UrlTextBox.Text = historyWindow.SelectedUrl;
                    NavigateToUrlInCurrentTab(); // Navega a la URL seleccionada
                }
            }
        }

        /// <summary>
        /// Maneja el clic en el bot√≥n "Marcadores". Abre la ventana de marcadores.
        /// </summary>
        private void BookmarksButton_Click(object sender, RoutedEventArgs e)
        {
            BookmarksWindow bookmarksWindow = new BookmarksWindow();
            if (bookmarksWindow.ShowDialog() == true) // Muestra la ventana de marcadores como un di√°logo
            {
                // Si el usuario seleccion√≥ una URL de los marcadores y hizo doble clic
                if (!string.IsNullOrEmpty(bookmarksWindow.SelectedUrl))
                {
                    UrlTextBox.Text = bookmarksWindow.SelectedUrl;
                    NavigateToUrlInCurrentTab(); // Navega a la URL seleccionada
                }
            }
        }

        /// <summary>
        /// Maneja el clic en el bot√≥n "A√±adir Marcador". A√±ade la p√°gina actual a los marcadores.
        /// </summary>
        private void AddBookmarkButton_Click(object sender, RoutedEventArgs e)
        {
            WebView2 currentWebView = GetCurrentWebView();
            if (currentWebView != null && currentWebView.CoreWebView2 != null)
            {
                var browserTab = GetCurrentBrowserTabItem();
                if (browserTab != null && browserTab.IsIncognito)
                {
                    MessageBox.Show("No se pueden a√±adir marcadores en modo inc√≥gnito.", "Error al A√±adir Marcador", MessageBoxButton.OK, Image.Warning);
                    return;
                }

                string url = currentWebView.CoreWebView2.Source;
                string title = currentWebView.CoreWebView2.DocumentTitle;

                if (!string.IsNullOrEmpty(url) && !string.IsNullOrEmpty(title))
                {
                    BookmarkManager.AddBookmark(url, title);
                }
                else
                {
                    MessageBox.Show("No se pudo a√±adir la p√°gina a marcadores. Aseg√∫rate de que la p√°gina est√© cargada y tenga un t√≠tulo.", "Error al A√±adir Marcador", MessageBoxButton.OK, Image.Warning);
                }
            }
            else
            {
                MessageBox.Show("No hay una p√°gina activa para a√±adir a marcadores.", "Error al A√±adir Marcador", MessageBoxButton.OK, Image.Error);
            }
        }

        /// <summary>
        /// Maneja el clic en el bot√≥n "Descargas". Abre la ventana del gestor de descargas.
        /// </summary>
        private void DownloadsButton_Click(object sender, RoutedEventArgs e)
        {
            DownloadsWindow downloadsWindow = new DownloadsWindow();
            downloadsWindow.Show(); // Mostrar la ventana de descargas (no modal, para que el usuario pueda seguir navegando)
        }

        /// <summary>
        /// Maneja el clic en el bot√≥n "Modo Lectura". Inyecta el script para activar/desactivar el modo lectura.
        /// </summary>
        private async void ReaderModeButton_Click(object sender, RoutedEventArgs e)
        {
            WebView2 currentWebView = GetCurrentWebView();
            if (currentWebView != null && currentWebView.CoreWebView2 != null)
            {
                if (!string.IsNullOrEmpty(_readerModeScript))
                {
                    try
                    {
                        // Inyectar el script en la p√°gina actual
                        await currentWebView.CoreWebView2.ExecuteScriptAsync(_readerModeScript);
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Error al aplicar el modo lectura: {ex.Message}", "Error de Modo Lectura", MessageBoxButton.OK, Image.Error);
                    }
                }
                else
                {
                    MessageBox.Show("El script de modo lectura no est√° cargado. Aseg√∫rate de que 'ReaderMode.js' exista.", "Error de Modo Lectura", MessageBoxButton.OK, Image.Warning);
                }
            }
            else
            {
                MessageBox.Show("No hay una p√°gina activa para aplicar el modo lectura.", "Error de Modo Lectura", MessageBoxButton.OK, Image.Error);
            }
        }

        /// <summary>
        /// Maneja el clic en el bot√≥n "Leer en Voz Alta". Inicia o detiene la lectura del contenido de la p√°gina.
        /// </summary>
        private async void ReadAloudButton_Click(object sender, RoutedEventArgs e)
        {
            if (_isReadingAloud)
            {
                _speechSynthesizer.SpeakAsyncCancelAll(); // Detener toda la lectura en curso
                _isReadingAloud = false;
                ReadAloudButton.Content = "üîä"; // Restaurar icono
                return;
            }

            WebView2 currentWebView = GetCurrentWebView();
            if (currentWebView != null && currentWebView.CoreWebView2 != null)
            {
                try
                {
                    // JavaScript para extraer el texto principal de la p√°gina
                    string script = @"
                        (function() {
                            let text = '';
                            let mainContent = document.querySelector('article, main, .post-content, .entry-content, #content, #main');

                            if (mainContent) {
                                text = mainContent.innerText || mainContent.textContent;
                            } else {
                                // Fallback a todo el cuerpo si no se encuentra contenido principal
                                text = document.body.innerText || document.body.textContent;
                            }

                            // Limpiar el texto (eliminar espacios en blanco excesivos, saltos de l√≠nea)
                            text = text.replace(/(\r\n|\n|\r)/gm, ' ').replace(/\s+/g, ' ').trim();

                            return text;
                        })();
                    ";
                    string pageText = await currentWebView.CoreWebView2.ExecuteScriptAsync(script);

                    // El resultado de ExecuteScriptAsync viene como una cadena JSON (con comillas si es string)
                    // Necesitamos deserializarla para obtener el valor real de la cadena.
                    pageText = System.Text.Json.JsonSerializer.Deserialize<string>(pageText);

                    if (!string.IsNullOrWhiteSpace(pageText))
                    {
                        _speechSynthesizer.SpeakAsync(pageText);
                        _isReadingAloud = true;
                        ReadAloudButton.Content = "‚è∏Ô∏è"; // Cambiar icono a pausa
                    }
                    else
                    {
                        MessageBox.Show("No se encontr√≥ texto legible en la p√°gina actual.", "Leer en Voz Alta", MessageBoxButton.OK, Image.Information);
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Error al leer en voz alta: {ex.Message}", "Error de Lectura", MessageBoxButton.OK, Image.Error);
                }
            }
            else
            {
                MessageBox.Show("No hay una p√°gina activa para leer en voz alta.", "Leer en Voz Alta", MessageBoxButton.OK, Image.Error);
            }
        }

        /// <summary>
        /// Maneja el clic en el bot√≥n "Pantalla Dividida". Alterna el modo de pantalla dividida para la pesta√±a actual.
        /// </summary>
        private async void SplitScreenButton_Click(object sender, RoutedEventArgs e)
        {
            var currentTab = GetCurrentBrowserTabItem();
            if (currentTab == null || currentTab.LeftWebView == null || currentTab.LeftWebView.CoreWebView2 == null)
            {
                MessageBox.Show("No hay una pesta√±a activa o el navegador no est√° listo.", "Error", MessageBoxButton.OK, Image.Error);
                return;
            }

            if (currentTab.IsSplit)
            {
                // Desactivar modo dividido
                DisableSplitScreenForCurrentTab(currentTab);
                SplitScreenButton.Content = "‚ÜîÔ∏è"; // Restaurar icono
            }
            else
            {
                // Activar modo dividido
                await EnableSplitScreenForCurrentTab(currentTab, _defaultHomePage); // Cargar p√°gina de inicio por defecto
                SplitScreenButton.Content = "‚û°Ô∏è"; // Cambiar icono a "derecha" (indicando que est√° dividido)
            }
        }

        /// <summary>
        /// Maneja el clic en el bot√≥n "IA". Activa la pantalla dividida y carga Gemini en el panel derecho.
        /// </summary>
        private async void AIButton_Click(object sender, RoutedEventArgs e)
        {
            var currentTab = GetCurrentBrowserTabItem();
            if (currentTab == null || currentTab.LeftWebView == null || currentTab.LeftWebView.CoreWebView2 == null)
            {
                MessageBox.Show("No hay una pesta√±a activa o el navegador no est√° listo.", "Error", MessageBoxButton.OK, Image.Error);
                return;
            }

            // Si no est√° en modo dividido, activarlo primero
            if (!currentTab.IsSplit)
            {
                await EnableSplitScreenForCurrentTab(currentTab, "https://gemini.google.com/");
                SplitScreenButton.Content = "‚û°Ô∏è"; // Asegurar que el icono de pantalla dividida se actualice
            }
            else
            {
                // Si ya est√° en modo dividido, simplemente navegar el panel derecho a Gemini
                if (currentTab.RightWebView != null && currentTab.RightWebView.CoreWebView2 != null)
                {
                    currentTab.RightWebView.CoreWebView2.Navigate("https://gemini.google.com/");
                }
                else
                {
                    // Esto no deber√≠a pasar si IsSplit es true, pero como fallback
                    await EnableSplitScreenForCurrentTab(currentTab, "https://gemini.google.com/");
                }
            }
        }

        /// <summary>
        /// Maneja el clic en el bot√≥n "Captura de Pantalla". Captura la vista actual del WebView2.
        /// </summary>
        private async void ScreenshotButton_Click(object sender, RoutedEventArgs e)
        {
            WebView2 currentWebView = GetCurrentWebView(); // Obtiene el WebView principal de la pesta√±a activa
            if (currentWebView == null || currentWebView.CoreWebView2 == null)
            {
                MessageBox.Show("No hay una p√°gina activa para capturar.", "Error de Captura", MessageBoxButton.OK, Image.Error);
                return;
            }

            try
            {
                // Crear un SaveFileDialog para que el usuario elija d√≥nde guardar la imagen
                Microsoft.Win32.SaveFileDialog saveFileDialog = new Microsoft.Win32.SaveFileDialog
                {
                    FileName = $"Captura_{DateTime.Now:yyyyMMdd_HHmmss}.png",
                    DefaultExt = ".png",
                    Filter = "Archivos PNG (*.png)|*.png|Todos los archivos (*.*)|*.*",
                    Title = "Guardar Captura de Pantalla"
                };

                if (saveFileDialog.ShowDialog() == true)
                {
                    string filePath = saveFileDialog.FileName;

                    // Capturar la vista del WebView2 en un MemoryStream
                    using (MemoryStream stream = new MemoryStream())
                    {
                        await currentWebView.CoreWebView2.CapturePreviewAsync(CoreWebView2CapturePreviewImageFormat.Png, stream);

                        // Guardar el stream en el archivo elegido
                        using (FileStream fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write))
                        {
                            stream.WriteTo(fileStream);
                        }
                    }
                    MessageBox.Show($"Captura de pantalla guardada en:\n{filePath}", "Captura Exitosa", MessageBoxButton.OK, Image.Information);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error al realizar la captura de pantalla: {ex.Message}", "Error de Captura", MessageBoxButton.OK, Image.Error);
            }
        }

        /// <summary>
        /// NUEVO: Maneja el clic en el bot√≥n "Administrador de Pesta√±as". Abre la ventana del administrador.
        /// </summary>
        private void TabManagerButton_Click(object sender, RoutedEventArgs e)
        {
            // Pasamos delegados para que la ventana del administrador pueda obtener y cerrar pesta√±as
            TabManagerWindow tabManagerWindow = new TabManagerWindow(GetBrowserTabItems, CloseBrowserTab, GetCurrentBrowserTabItemInternal);
            tabManagerWindow.Show(); // Mostrar la ventana (no modal)
        }

        /// <summary>
        /// M√©todo p√∫blico para que el Administrador de Pesta√±as pueda obtener la lista de todas las pesta√±as.
        /// </summary>
        /// <returns>Una lista de BrowserTabItem.</returns>
        public List<BrowserTabItem> GetBrowserTabItems()
        {
            return _browserTabs;
        }

        /// <summary>
        /// M√©todo p√∫blico para que el Administrador de Pesta√±as pueda cerrar una pesta√±a espec√≠fica.
        /// Se llama al m√©todo CloseTabButton_Click interno para reutilizar la l√≥gica de cierre.
        /// </summary>
        /// <param name="tabToClose">El TabItem que se desea cerrar.</param>
        public void CloseBrowserTab(TabItem tabToClose)
        {
            // Simular un clic en el bot√≥n de cerrar de la pesta√±a para reutilizar la l√≥gica existente.
            // Esto es un poco hacky, pero funciona si el bot√≥n de cerrar usa el TabItem como Tag.
            // Una alternativa m√°s limpia ser√≠a refactorizar la l√≥gica de cierre en un m√©todo separado sin UI.
            var closeButton = tabToClose.Header is DockPanel headerPanel && headerPanel.Children.OfType<Button>().Any()
                              ? headerPanel.Children.OfType<Button>().First()
                              : null;

            if (closeButton != null)
            {
                CloseTabButton_Click(closeButton, new RoutedEventArgs());
            }
            else
            {
                // Fallback si no se encuentra el bot√≥n de cerrar (ej. pesta√±a suspendida que no tiene el bot√≥n en el header)
                // En ese caso, la l√≥gica de eliminaci√≥n directa del TabControl y la lista _browserTabs
                BrowserTabControl.Items.Remove(tabToClose);
                var browserTabItem = _browserTabs.FirstOrDefault(t => t.Tab == tabToClose);
                if (browserTabItem != null)
                {
                    browserTabItem.LeftWebView?.Dispose();
                    browserTabItem.RightWebView?.Dispose();
                    _browserTabs.Remove(browserTabItem);
                }
                if (BrowserTabControl.Items.Count == 0)
                {
                    AddNewTab();
                }
            }
        }

        /// <summary>
        /// M√©todo interno para obtener la pesta√±a activa (para pasar al TabManagerWindow).
        /// </summary>
        /// <returns>El TabItem actualmente seleccionado.</returns>
        private TabItem GetCurrentBrowserTabItemInternal()
        {
            return BrowserTabControl.SelectedItem as TabItem;
        }


        /// <summary>
        /// Activa el modo de pantalla dividida para la pesta√±a actual.
        /// </summary>
        /// <param name="tabItem">La pesta√±a a dividir.</param>
        /// <param name="rightPanelUrl">La URL a cargar en el panel derecho.</param>
        private async System.Threading.Tasks.Task EnableSplitScreenForCurrentTab(BrowserTabItem tabItem, string rightPanelUrl)
        {
            // Detener lectura en voz alta si est√° activa
            if (_isReadingAloud)
            {
                _speechSynthesizer.SpeakAsyncCancelAll();
                _isReadingAloud = false;
                ReadAloudButton.Content = "üîä";
            }

            // Crear el segundo WebView2
            WebView2 webView2 = new WebView2();
            webView2.Source = new Uri(rightPanelUrl); // La segunda vista empieza en la URL especificada
            webView2.Name = "WebView2_Tab" + _browserTabs.IndexOf(tabItem); // Nombre √∫nico
            webView2.HorizontalAlignment = HorizontalAlignment.Stretch;
            webView2.VerticalAlignment = VerticalAlignment.Stretch;

            // Usar el mismo entorno que el LeftWebView para consistencia
            CoreWebView2Environment envToUse = tabItem.IsIncognito ? _incognitoEnvironment : _defaultEnvironment;
            webView2.CoreWebView2InitializationCompleted += (s, ev) => ConfigureCoreWebView2(webView2, ev, envToUse);

            await webView2.EnsureCoreWebView2Async(null); // Asegurar inicializaci√≥n

            // Crear el Grid para los dos WebView2s
            Grid splitGrid = new Grid();
            splitGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });
            splitGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = GridLength.Auto }); // Para el splitter
            splitGrid.ColumnDefinitions.Add(new ColumnDefinition { Width = new GridLength(1, GridUnitType.Star) });

            // Mover el LeftWebView al primer panel
            Grid.SetColumn(tabItem.LeftWebView, 0);
            splitGrid.Children.Add(tabItem.LeftWebView);

            // A√±adir el GridSplitter
            GridSplitter splitter = new GridSplitter
            {
                Width = 5,
                HorizontalAlignment = HorizontalAlignment.Center,
                VerticalAlignment = VerticalAlignment.Stretch,
                Background = Brushes.LightGray,
                ResizeBehavior = GridResizeBehavior.PreviousAndNext
            };
            Grid.SetColumn(splitter, 1);
            splitGrid.Children.Add(splitter);

            // A√±adir el nuevo WebView2 al segundo panel
            Grid.SetColumn(webView2, 2);
            splitGrid.Children.Add(webView2);

            // Actualizar el contenido de la pesta√±a
            tabItem.Tab.Content = splitGrid;
            tabItem.RightWebView = webView2;
            tabItem.IsSplit = true;
        }

        /// <summary>
        /// Desactiva el modo de pantalla dividida para la pesta√±a dada.
        /// </summary>
        private void DisableSplitScreenForCurrentTab(BrowserTabItem tabItem)
        {
            // Detener lectura en voz alta si est√° activa
            if (_isReadingAloud)
            {
                _speechSynthesizer.SpeakAsyncCancelAll();
                _isReadingAloud = false;
                ReadAloudButton.Content = "üîä";
            }

            // Asegurarse de que el LeftWebView no se deseche (es el principal)
            // Quitar el LeftWebView de su contenedor actual (el splitGrid)
            Grid currentGrid = tabItem.Tab.Content as Grid;
            if (currentGrid != null)
            {
                currentGrid.Children.Remove(tabItem.LeftWebView);
            }

            // Desechar el RightWebView
            if (tabItem.RightWebView != null)
            {
                tabItem.RightWebView.Dispose();
                tabItem.RightWebView = null;
            }

            // Restaurar el contenido de la pesta√±a a solo el LeftWebView
            Grid singleViewGrid = new Grid();
            singleViewGrid.Children.Add(tabItem.LeftWebView); // Vuelve a a√±adirlo a un Grid simple
            tabItem.Tab.Content = singleViewGrid;
            tabItem.IsSplit = false;
        }

        /// <summary>
        /// Maneja el clic en el bot√≥n "Modo Inc√≥gnito". Abre una nueva ventana en modo inc√≥gnito.
        /// </summary>
        private void IncognitoButton_Click(object sender, RoutedEventArgs e)
        {
            // Para simplicidad en este ejemplo, abriremos una nueva PESTA√ëA inc√≥gnito.
            AddNewTab(_defaultHomePage, isIncognito: true);
        }

        /// <summary>
        /// Cierra una pesta√±a cuando se hace clic en su bot√≥n "X".
        /// </summary>
        private void CloseTabButton_Click(object sender, RoutedEventArgs e)
        {
            Button closeButton = sender as Button;
            TabItem tabToClose = closeButton?.Tag as TabItem; // Obtener el TabItem asociado al bot√≥n

            if (tabToClose != null)
            {
                BrowserTabControl.Items.Remove(tabToClose); // Eliminar la pesta√±a del TabControl
                var browserTabItem = _browserTabs.FirstOrDefault(t => t.Tab == tabToClose);
                if (browserTabItem != null)
                {
                    // Desechar ambos WebView2 si est√°n presentes
                    browserTabItem.LeftWebView?.Dispose();
                    browserTabItem.RightWebView?.Dispose();
                    _browserTabs.Remove(browserTabItem); // Eliminar de nuestra lista de seguimiento
                }

                // Si no quedan pesta√±as, abre una nueva por defecto para evitar una ventana vac√≠a.
                if (BrowserTabControl.Items.Count == 0)
                {
                    // Si se cerr√≥ la √∫ltima pesta√±a, abrimos una nueva, por defecto normal
                    AddNewTab();
                }
            }
        }

        /// <summary>
        /// Se ejecuta cuando la selecci√≥n de la pesta√±a en el TabControl cambia.
        /// Actualiza la barra de URL y el t√≠tulo de la ventana.
        /// </summary>
        private void BrowserTabControl_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            UpdateUrlTextBoxFromCurrentTab();

            // Detener la lectura en voz alta si la pesta√±a activa cambia
            if (_isReadingAloud)
            {
                _speechSynthesizer.SpeakAsyncCancelAll();
                _isReadingAloud = false;
                ReadAloudButton.Content = "üîä"; // Restaurar icono
            }

            // Actualizar el icono del bot√≥n de pantalla dividida
            var currentTab = GetCurrentBrowserTabItem();
            if (currentTab != null)
            {
                SplitScreenButton.Content = currentTab.IsSplit ? "‚û°Ô∏è" : "‚ÜîÔ∏è";
            }
            else
            {
                SplitScreenButton.Content = "‚ÜîÔ∏è";
            }

            // Si la pesta√±a seleccionada est√° suspendida, reactivarla
            if (BrowserTabControl.SelectedItem is TabItem selectedTabItem)
            {
                var browserTab = _browserTabs.FirstOrDefault(t => t.Tab == selectedTabItem);
                if (browserTab != null && browserTab.LeftWebView == null) // Si el LeftWebView es nulo, la pesta√±a est√° suspendida
                {
                    if (_isTabSuspensionEnabled) // Solo reactivar si la suspensi√≥n est√° habilitada
                    {
                        // Recrear WebView2 y cargar la URL
                        string urlToReload = selectedTabItem.Tag?.ToString(); // Obtener la URL guardada

                        WebView2 newWebView = new WebView2();
                        newWebView.Source = new Uri(urlToReload ?? _defaultHomePage);
                        newWebView.Name = "WebView1_Tab" + (BrowserTabControl.Items.IndexOf(selectedTabItem) + 1);
                        newWebView.HorizontalAlignment = HorizontalAlignment.Stretch;
                        newWebView.VerticalAlignment = VerticalAlignment.Stretch;

                        // Enlazar eventos (similar a AddNewTab, asegurando el entorno correcto)
                        newWebView.Loaded += WebView_Loaded;
                        CoreWebView2Environment envToUse = browserTab.IsIncognito ? _incognitoEnvironment : _defaultEnvironment;
                        newWebView.CoreWebView2InitializationCompleted += (s, ev) => ConfigureCoreWebView2(newWebView, ev, envToUse); // Pasar e y envToUse
                        // Los eventos de navegaci√≥n, fuente y t√≠tulo se re-adjuntan en ConfigureCoreWebView2

                        // Reemplazar el contenido de la pesta√±a (volver√° a ser una vista simple)
                        Grid tabContent = new Grid();
                        tabContent.Children.Add(newWebView);
                        selectedTabItem.Content = tabContent;

                        browserTab.LeftWebView = newWebView; // Actualizar la referencia al nuevo WebView
                        browserTab.RightWebView = null; // Asegurar que el derecho sea nulo
                        browserTab.IsSplit = false; // No est√° en modo dividido al reactivar

                        // Restaurar el t√≠tulo original (quitar "(Suspendida)")
                        string originalHeaderText = browserTab.HeaderTextBlock.Text;
                        if (!originalHeaderText.StartsWith("(Suspendida) ")) // Evitar duplicar el prefijo
                        {
                            tabItem.HeaderTextBlock.Text = originalHeaderText.Replace("(Suspendida) ", "");
                        }
                    }
                    else
                    {
                        // Si la suspensi√≥n no est√° activa pero la pesta√±a est√° suspendida (ej. se deshabilit√≥ la opci√≥n)
                        // recargarla como una nueva pesta√±a normal.
                        string urlToReload = selectedTabItem.Tag?.ToString();
                        AddNewTab(urlToReload);
                        BrowserTabControl.Items.Remove(selectedTabItem); // Quitar la pesta√±a vieja y suspendida
                    }
                }
            }
        }

        /// <summary>
        /// Actualiza el texto de la barra de URL y el t√≠tulo de la ventana
        /// con la informaci√≥n de la pesta√±a actualmente seleccionada.
        /// </summary>
        private void UpdateUrlTextBoxFromCurrentTab()
        {
            WebView2 currentWebView = GetCurrentWebView(); // Esto ahora devuelve el LeftWebView por defecto
            if (currentWebView != null && currentWebView.CoreWebView2 != null)
            {
                UrlTextBox.Text = currentWebView.CoreWebView2.Source;
                this.Title = currentWebView.CoreWebView2.DocumentTitle + " - Mi Navegador Web";
            }
            else
            {
                // Si no hay pesta√±a activa o el WebView principal no est√° listo, limpia la barra de URL y el t√≠tulo.
                UrlTextBox.Text = string.Empty;
                this.Title = "Mi Navegador Web";
            }
        }

        /// <summary>
        /// Obtiene la instancia de WebView2 principal (izquierda) de la pesta√±a actualmente seleccionada.
        /// </summary>
        /// <returns>El LeftWebView de la pesta√±a activa, o null si no hay una pesta√±a seleccionada o su contenido no es v√°lido.</returns>
        private WebView2 GetCurrentWebView()
        {
            return GetCurrentBrowserTabItem()?.LeftWebView;
        }

        /// <summary>
        /// Obtiene el objeto BrowserTabItem de la pesta√±a actualmente seleccionada.
        /// </summary>
        /// <returns>El BrowserTabItem de la pesta√±a activa, o null.</returns>
        private BrowserTabItem GetCurrentBrowserTabItem()
        {
            if (BrowserTabControl.SelectedItem is TabItem selectedTabItem)
            {
                return _browserTabs.FirstOrDefault(t => t.Tab == selectedTabItem);
            }
            return null;
        }

        /// <summary>
        /// Maneja el clic en el bot√≥n "Opciones". Abre la ventana de configuraci√≥n.
        /// </summary>
        private void SettingsButton_Click(object sender, RoutedEventArgs e)
        {
            // Pasa la p√°gina de inicio actual, el estado del bloqueador, la URL del motor de b√∫squeda y el estado de suspensi√≥n
            SettingsWindow settingsWindow = new SettingsWindow(_defaultHomePage, AdBlocker.IsEnabled, _defaultSearchEngineUrl, _isTabSuspensionEnabled);

            // Suscribirse a los nuevos eventos de la ventana de configuraci√≥n
            settingsWindow.OnClearBrowsingData += SettingsWindow_OnClearBrowsingData;
            settingsWindow.OnSuspendInactiveTabs += SettingsWindow_OnSuspendInactiveTabs;


            if (settingsWindow.ShowDialog() == true) // Muestra la ventana de configuraci√≥n como un di√°logo modal
            {
                // Si el usuario hizo clic en "Guardar" en la ventana de configuraci√≥n
                _defaultHomePage = settingsWindow.HomePage; // Actualiza la p√°gina de inicio
                AdBlocker.IsEnabled = settingsWindow.IsAdBlockerEnabled; // Actualiza el estado del bloqueador
                _defaultSearchEngineUrl = settingsWindow.DefaultSearchEngineUrl; // Actualiza la URL del motor de b√∫squeda
                _isTabSuspensionEnabled = settingsWindow.IsTabSuspensionEnabled; // Actualiza el estado de suspensi√≥n
                SaveSettings(); // Guarda todas las configuraciones en App.config
                MessageBox.Show("Configuraci√≥n guardada. Los cambios se aplicar√°n al abrir nuevas pesta√±as o al hacer clic en 'Inicio'.", "Configuraci√≥n Guardada", MessageBoxButton.OK, Image.Information);
            }

            // Es importante desuscribirse de los eventos para evitar fugas de memoria
            settingsWindow.OnClearBrowsingData -= SettingsWindow_OnClearBrowsingData;
            settingsWindow.OnSuspendInactiveTabs -= SettingsWindow_OnSuspendInactiveTabs;
        }

        /// <summary>
        /// Nuevo: Manejador para borrar datos de navegaci√≥n.
        /// Se invoca desde la ventana de configuraci√≥n.
        /// </summary>
        private async void SettingsWindow_OnClearBrowsingData()
        {
            // Esto borrar√° datos de la carpeta UserData del entorno predeterminado.
            WebView2 anyWebView = GetCurrentWebView(); // Solo necesitamos una instancia para acceder al entorno

            if (_defaultEnvironment != null)
            {
                CoreWebView2BrowserDataKinds dataKinds =
                    CoreWebView2BrowserDataKinds.Cookies |
                    CoreWebView2BrowserDataKinds.DiskCache |
                    CoreWebView2BrowserDataKinds.Downloads |
                    CoreWebView2BrowserDataKinds.GeneralAutofill |
                    CoreWebView2BrowserDataKinds.ReadAloud |
                    CoreWebView2BrowserDataKinds.History |
                    CoreWebView2BrowserDataKinds.IndexedDb |
                    CoreWebView2BrowserDataKinds.LocalStorage |
                    CoreWebView2BrowserDataKinds.PasswordAutofill |
                    CoreWebView2BrowserDataKinds.OtherData;

                await _defaultEnvironment.ClearBrowsingDataAsync(dataKinds);
                MessageBox.Show("Datos de navegaci√≥n (cach√©, cookies, etc.) borrados con √©xito.", "Limpieza Completa", MessageBoxButton.OK, Image.Information);
            }
            else
            {
                MessageBox.Show("No se pudo acceder al motor del navegador para borrar los datos del perfil normal.", "Error de Limpieza", MessageBoxButton.OK, Image.Error);
            }
        }

        /// <summary>
        /// Nuevo: Manejador para suspender pesta√±as inactivas.
        /// Se invoca desde la ventana de configuraci√≥n.
        /// </summary>
        private void SettingsWindow_OnSuspendInactiveTabs()
        {
            if (!_isTabSuspensionEnabled)
            {
                MessageBox.Show("La suspensi√≥n de pesta√±as no est√° habilitada en la configuraci√≥n. Habil√≠tela para usar esta funci√≥n.", "Suspensi√≥n Deshabilitada", MessageBoxButton.OK, Image.Warning);
                return;
            }

            foreach (var tabItem in _browserTabs)
            {
                // No suspender la pesta√±a activa ni las pesta√±as inc√≥gnito (ya que su data no es persistente)
                // Tampoco suspender pesta√±as en modo dividido, para evitar complejidad adicional
                if (tabItem.Tab != BrowserTabControl.SelectedItem && !tabItem.IsIncognito && !tabItem.IsSplit)
                {
                    // Un enfoque simple para "suspender": reemplazar el contenido con un mensaje y liberar el LeftWebView.
                    // Cuando el usuario vuelve a la pesta√±a, el WebView2 se recrea y se recarga la URL.
                    if (tabItem.LeftWebView != null && tabItem.LeftWebView.CoreWebView2 != null)
                    {
                        // Guardar la URL actual antes de desechar
                        string suspendedUrl = tabItem.LeftWebView.Source.OriginalString;

                        // Desechar el WebView2 para liberar recursos
                        tabItem.LeftWebView.Dispose();
                        tabItem.LeftWebView = null; // Marcar como nulo para indicar que est√° suspendido

                        // Cambiar el contenido de la pesta√±a a una pantalla de "suspendido"
                        TextBlock suspendedMessage = new TextBlock
                        {
                            Text = $"Pesta√±a suspendida para ahorrar recursos.\nHaz clic para recargar: {suspendedUrl}",
                            HorizontalAlignment = HorizontalAlignment.Center,
                            VerticalAlignment = VerticalAlignment.Center,
                            TextAlignment = TextAlignment.Center,
                            FontSize = 14,
                            Padding = new Thickness(20),
                            TextWrapping = TextWrapping.Wrap
                        };
                        tabItem.Tab.Content = suspendedMessage;
                        tabItem.Tab.Tag = suspendedUrl; // Guardar la URL en el Tag del TabItem para recargarla

                        // Cambiar el encabezado de la pesta√±a para indicar que est√° suspendida
                        string originalHeaderText = tabItem.HeaderTextBlock.Text;
                        if (!originalHeaderText.StartsWith("(Suspendida) ")) // Evitar duplicar el prefijo
                        {
                            tabItem.HeaderTextBlock.Text = "(Suspendida) " + originalHeaderText;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Carga las configuraciones de la aplicaci√≥n (p√°gina de inicio, estado del bloqueador, motor de b√∫squeda, suspensi√≥n de pesta√±as) desde App.config.
        /// </summary>
        private void LoadSettings()
        {
            // Cargar la p√°gina de inicio guardada
            string savedHomePage = ConfigurationManager.AppSettings[HomePageSettingKey];
            if (!string.IsNullOrEmpty(savedHomePage))
            {
                _defaultHomePage = savedHomePage;
            }

            // Cargar el estado del bloqueador de anuncios
            string savedAdBlockerState = ConfigurationManager.AppSettings[AdBlockerSettingKey];
            if (bool.TryParse(savedAdBlockerState, out bool isEnabled))
            {
                AdBlocker.IsEnabled = isEnabled;
            }
            else
            {
                AdBlocker.IsEnabled = false; // Por defecto, el bloqueador est√° deshabilitado si no hay configuraci√≥n o es inv√°lida.
            }

            // Cargar la URL del motor de b√∫squeda predeterminado
            string savedSearchEngineUrl = ConfigurationManager.AppSettings[DefaultSearchEngineSettingKey];
            if (!string.IsNullOrEmpty(savedSearchEngineUrl))
            {
                _defaultSearchEngineUrl = savedSearchEngineUrl;
            }
            // Si no hay configuraci√≥n guardada, se usar√° la _defaultSearchEngineUrl inicial ("https://www.google.com/search?q=")

            // Cargar el estado de la suspensi√≥n de pesta√±as
            string savedTabSuspensionState = ConfigurationManager.AppSettings[TabSuspensionSettingKey];
            if (bool.TryParse(savedTabSuspensionState, out bool isTabSuspensionEnabled))
            {
                _isTabSuspensionEnabled = isTabSuspensionEnabled;
            }
            else
            {
                _isTabSuspensionEnabled = false; // Por defecto deshabilitado
            }
        }

        /// <summary>
        /// Guarda las configuraciones actuales (p√°gina de inicio, estado del bloqueador, motor de b√∫squeda, suspensi√≥n de pesta√±as) en App.config.
        /// </summary>
        private void SaveSettings()
        {
            Configuration config = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);

            // Guardar p√°gina de inicio
            if (config.AppSettings.Settings[HomePageSettingKey] == null)
                config.AppSettings.Settings.Add(HomePageSettingKey, _defaultHomePage);
            else
                config.AppSettings.Settings[HomePageSettingKey].Value = _defaultHomePage;

            // Guardar estado del bloqueador de anuncios
            if (config.AppSettings.Settings[AdBlockerSettingKey] == null)
                config.AppSettings.Settings.Add(AdBlockerSettingKey, AdBlocker.IsEnabled.ToString());
            else
                config.AppSettings.Settings[AdBlockerSettingKey].Value = AdBlocker.IsEnabled.ToString();

            // Guardar URL del motor de b√∫squeda predeterminado
            if (config.AppSettings.Settings[DefaultSearchEngineSettingKey] == null)
                config.AppSettings.Settings.Add(DefaultSearchEngineSettingKey, _defaultSearchEngineUrl);
            else
                config.AppSettings.Settings[DefaultSearchEngineSettingKey].Value = _defaultSearchEngineUrl;

            // Guardar estado de la suspensi√≥n de pesta√±as
            if (config.AppSettings.Settings[TabSuspensionSettingKey] == null)
                config.AppSettings.Settings.Add(TabSuspensionSettingKey, _isTabSuspensionEnabled.ToString());
            else
                config.AppSettings.Settings[TabSuspensionSettingKey].Value = _isTabSuspensionEnabled.ToString();

            config.Save(ConfigurationSaveMode.Modified); // Guarda los cambios en el archivo de configuraci√≥n
            ConfigurationManager.RefreshSection("appSettings"); // Refresca la secci√≥n para que los nuevos valores est√©n disponibles inmediatamente
        }

        /// <summary>
        /// Se ejecuta cuando la ventana se est√° cerrando. Limpia los recursos del entorno inc√≥gnito y del sintetizador de voz.
        /// </summary>
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            // Detener y desechar el sintetizador de voz
            if (_speechSynthesizer != null)
            {
                _speechSynthesizer.SpeakAsyncCancelAll();
                _speechSynthesizer.Dispose();
                _speechSynthesizer = null;
            }

            // Desechar todos los WebViews de todas las pesta√±as
            foreach (var tab in _browserTabs)
            {
                tab.LeftWebView?.Dispose();
                tab.RightWebView?.Dispose();
            }
            _browserTabs.Clear(); // Limpiar la lista de pesta√±as

            // Limpiar los entornos de WebView2 (especialmente el de inc√≥gnito)
            if (_incognitoEnvironment != null)
            {
                string incognitoUserDataFolder = _incognitoEnvironment.UserDataFolder;
                _incognitoEnvironment = null; // Liberar la referencia
                try
                {
                    if (Directory.Exists(incognitoUserDataFolder))
                    {
                        Directory.Delete(incognitoUserDataFolder, true); // Eliminar recursivamente la carpeta temporal
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error al eliminar la carpeta de datos de inc√≥gnito: {ex.Message}");
                }
            }
            if (_defaultEnvironment != null)
            {
                _defaultEnvironment = null; // Liberar la referencia
            }
        }


        /// <summary>
        /// Clase auxiliar para gestionar la informaci√≥n de cada pesta√±a del navegador,
        /// incluyendo si est√° en modo dividido y referencias a ambos WebView2.
        /// </summary>
        private class BrowserTabItem
        {
            public TabItem Tab { get; set; } // El control TabItem de WPF
            public WebView2 LeftWebView { get; set; } // La instancia de WebView2 del panel izquierdo (principal)
            public WebView2 RightWebView { get; set; } // La instancia de WebView2 del panel derecho (puede ser null)
            public TextBlock HeaderTextBlock { get; set; } // El TextBlock que muestra el t√≠tulo en el encabezado de la pesta√±a
            public bool IsIncognito { get; set; } // Indica si la pesta√±a est√° en modo inc√≥gnito
            public bool IsSplit { get; set; } // Indica si la pesta√±a est√° en modo dividido
        }
    }
}
